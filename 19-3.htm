<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0172)http://safari.informit.com/JVXSL.asp?x=1&mode=print&sortKey=title&sortOrder=asc&view=&xmlid=1-56592-748-6/lpicertnut-CHP-19-SECT-3&open=false&catid=&s=1&b=1&f=1&t=1&c=1&u=1 -->
<HTML><HEAD><TITLE>InformIT Online Books > LPI Linux Certification in a Nutshell</TITLE>
<META http-equiv=Content-Type content="text/html; charset=big5"><LINK 
href="19-3.files/style.css" type=text/css rel=STYLESHEET><LINK 
href="19-3.files/docsafari.css" type=text/css rel=STYLESHEET>
<SCRIPT>
      function OpenWin(url, w, h)
      {
        if(!w) w = 400;
        if(!h) h = 300;
        window.open(url, "_new", "width=" + w + ",height=" + h + ",menubar=no,toobar=no,scrollbars=yes", true);
      }
    </SCRIPT>

<META content="Microsoft FrontPage 4.0" name=GENERATOR></HEAD>
<BODY leftMargin=0 topMargin=0 marginheight="0" marginwidth="0"><A 
name=toppage></A><SPAN class=v2></SPAN>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR vAlign=top>
    <TD align=left>
      <TABLE width="95%">
        <TBODY>
        <TR>
          <TD align=left><BR><SPAN class=printhdr><B>Book: </B>LPI Linux  
            Certification in a Nutshell<BR><B>Section: </B>Chapter 19.&nbsp;  
            Networking Fundamentals (Topic 1.12)</SPAN><BR><BR><BR> 
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
              <TR>
                <TD vAlign=top><A name=lpicertnut-CHP-19-SECT-3></A>
                  <H3 class=docSection1Title>19.3 Objective 4: Configure and Use 
                  PPP</H3>
                  <P class=docText>The <A  
                  name=lpicertnut-IDXTERM-1398></A>Point-to-Point Protocol (PPP)  
                  is a method of constructing a network connection between two  
                  systems using a serial interface. Usually, this interface is a  
                  pair of modems connected by a telephone call over a switched  
                  voice network. However, PPP isn't specifically tied to the use  
                  of modems and can also work with a direct serial connection  
                  using a <SPAN class=docEmphasis>null modem</SPAN> cable  
                  (sometimes known as a <SPAN class=docEmphasis>crossover</SPAN>  
                  cable, which is not covered on LPI Exam 102). When PPP is  
                  implemented on a Linux system, it creates a new network  
                  interface, usually <TT>ppp0</TT>, which is configured for use  
                  with TCP/IP and an IP address. </P> 
                  <P class=docText>In order to use PPP, your kernel must be  
                  compiled with PPP support. Most distributions include PPP  
                  support in the kernels they install, but if yours doesn't or  
                  if you build your own kernels, you must select <SPAN  
                  class=docEmphasis>PPP Support</SPAN> under <SPAN  
                  class=docEmphasis>Network Device Support</SPAN> in your kernel  
                  configuration (see <a class="docLink" href="15-0.htm">Chapter  
                  15</a> for information on compiling kernels). </P><A  
                  name=lpicertnut-CHP-19-SECT-3.1></A>
                  <H4 class=docSection2Title>19.3.1 Clients and servers</H4>
                  <P class=docText>PPP is a peer-to-peer protocol, in which 
                  there is no technical difference between the two systems 
                  sharing a PPP link. When used for dialup communications, 
                  however, it is convenient to think of the system making the 
                  call as a PPP client and the system being called as a PPP 
                  server. Linux can do both jobs simultaneously if multiple 
                  serial interfaces are available, but this section covers only 
                  the client-side configuration as required by Exam 102. </P><A 
                  name=lpicertnut-CHP-19-SECT-3.1.1></A>
                  <H5 class=docSection3Title>19.3.1.1 Serial ports and 
                  modems</H5>
                  <P class=docText>The only hardware required to create a PPP  
                  dialup connection are a <A name=IXT-19-350967></A>serial  
                  interface and a modem. These may be separate devices,  
                  including an external modem device cabled to an internal  
                  serial interface. Internal modems implement both the port and  
                  the modem hardware on a single board, reducing costs. Serial  
                  ports are a standard item on most small computers and  
                  communicate using RS-232, an old standard for serial  
                  communications with terminals, modems, and other devices. On  
                  Linux, serial ports are accessed via device files, usually  
                  referred to as <I>/dev/ttyS0</I> and <I>/dev/ttyS1</I>.<SUP  
                  class=docFootnote>[8]</SUP> In addition,  
                  a link for a default modem device, <I>/dev/modem</I>, is often  
                  made to point to the serial port where a modem is attached.  
                  For example: </P> 
                  <BLOCKQUOTE>
                    <P class=docFootnote><SUP><A name="">[8]</A></SUP> These 
                    device names were <I>/dev/cua0 </I>and <I>/dev/cua1 </I>in 
                    previous Linux kernels. They're referred to as 
                    <TT>COM1:</TT> and <TT>COM2:</TT> in MS-DOS and 
                  Windows.</P></BLOCKQUOTE><PRE>crw-------  1 root tty   Apr 25 18:28 /dev/ttyS0
crw-------  1 root tty   May  5  1998 /dev/ttyS1
lrwxrwxrwx  1 root root  Dec  7 23:04 /dev/modem -&gt; ttyS0</PRE>
                  <P class=docText>Each byte of information to be sent through a  
                  serial interface is sent bit by bit at a periodic rate known  
                  as the <SPAN class=docEmphasis>baud rate</SPAN><A  
                  name=IXT-19-350968></A>. In the early days of modems, data was  
                  transmitted over the phone at the same baud rate as it was  
                  encoded by the serial port. However, modern modems compress  
                  data before transmitting it and can accommodate higher data  
                  rates from host systems. As a result, the serial port  
                  typically runs at its fastest speed, allowing the modem to  
                  independently set a line speed after negotiating with the  
                  server's modem. By keeping the data rate between computer and  
                  modem high, the modem has a constant stream of data ready for  
                  transmission, maximizing throughput. </P> 
                  <P class=docText>Built into each serial interface is a data  
                  <SPAN class=docEmphasis>buffer</SPAN> capable of holding a  
                  finite amount of information. When serial data enters the  
                  buffer faster than it can be removed, a data overrun occurs  
                  unless the data flow is stopped through the use of a <SPAN  
                  class=docEmphasis>flow control</SPAN><A 
                  name=IXT-19-350969></A> signal. For example, when a system is  
                  sending data into a modem through a serial interface, the  
                  modem must send a stop signal when it has no more room in its  
                  buffer, and later send a start signal when the buffer again  
                  has free space. The result is that while the modem sends a  
                  constant stream to the other modem, the serial interface is  
                  running bursts of data managed by flow controls. In simple  
                  cases such as terminals, two flow control characters named  
                  <TT>XON</TT><I> </I>and <TT>XOFF</TT> are transmitted in the  
                  serial data stream and are interpreted as controls to  
                  hardware. However, PPP uses the entire serial byte and is less  
                  efficient if control characters are allowed, so another means  
                  -- known as <SPAN class=docEmphasis>ready-to-send</SPAN> (RTS)  
                  and <SPAN class=docEmphasis>clear-to-send</SPAN> (CTS) -- is  
                  used for flow control. These signals are included in standard  
                  serial cables and allow <SPAN class=docEmphasis>hardware flow  
                  control</SPAN> between devices. </P><A  
                  name=lpicertnut-CHP-19-SECT-3.1.2></A>
                  <H5 class=docSection3Title>19.3.1.2 PPP overview</H5>
                  <P class=docText><A name=IXT-19-350970></A>PPP connections are  
                  established through these general steps: </P><SPAN  
                  style="FONT-WEIGHT: bold">
                  <OL class=docList type=1>
                    <LI><SPAN style="FONT-WEIGHT: normal">
                    <P class=docList>A serial connection is created with a 
                    remote PPP server. This involves setting local serial port 
                    parameters, setting local modem parameters, and instructing 
                    the modem to dial the telephone number of the PPP server. 
                    After the modem on the other end answers, the two modems 
                    negotiate the best possible link speed, depending on their 
                    capabilities and the quality of the telephone line. 
                    </P></SPAN>
                    <LI><SPAN style="FONT-WEIGHT: normal">
                    <P class=docList>User account authentication information is 
                    supplied to the PPP server. More than one method exists for 
                    this task, but in many cases, the PPP server simply provides 
                    clear text login and password prompts, and the client 
                    responds in the same way. </P></SPAN>
                    <LI><SPAN style="FONT-WEIGHT: normal">
                    <P class=docList>PPP is started on the client. Many servers 
                    automatically initiate PPP upon successful authentication, 
                    while others offer a sort of command-line interface where 
                    PPP can be started with a command. </P></SPAN>
                    <LI><SPAN style="FONT-WEIGHT: normal">
                    <P class=docList>The PPP server selects an IP address from a 
                    pool of addresses reserved for PPP connections and provides 
                    it to the client in plain text. The server then initiates a 
                    binary data stream to link the PPP client and server 
                    software. </P></SPAN>
                    <LI><SPAN style="FONT-WEIGHT: normal">
                    <P class=docList>The PPP client software uses the  
                    temporarily assigned IP address to configure the new  
                    interface and its required routes.<SUP class=docFootnote>[9]</SUP> It then  
                    joins the server in establishing the PPP binary data stream.  
                    </P>
                    <BLOCKQUOTE>
                      <P class=docFootnote><SUP><A name="">[9]</A></SUP> 
                      Additional information beyond the IP address can be 
                      provided to clients using DHCP. Examples include the 
                      default gateway and DNS 
                  servers.</P></BLOCKQUOTE></SPAN></LI></OL></SPAN><A 
                  name=lpicertnut-CHP-19-SECT-3.1.3></A>
                  <H5 class=docSection3Title>19.3.1.3 Chat scripts</H5>
                  <P class=docText><A name=IXT-19-350971></A>Most <A  
                  name=IXT-19-350972></A>of this process requires a dialog  
                  between the calling computer and its modem, and subsequently  
                  the PPP server, including the interpretation of responses. For  
                  example, it's common to begin the entire process by  
                  instructing the modem to reset itself, ensuring that settings  
                  from previous communications sessions don't affect the current  
                  session. After the reset instruction is completed, the modem  
                  responds with <TT>OK</TT> on a line by itself. It would be  
                  impractical to proceed if the reset command fails, so the  
                  modem's response must be tested, and further modem commands  
                  presented only if the appropriate responses are received. This  
                  command/response dialog function is implemented using the  
                  <SPAN class=docEmphBold>chat<SUP class=docFootnote>[10]</SUP></SPAN> 
                  utility, intended specifically for use with modems. <SPAN  
                  class=docEmphBold>chat</SPAN> executes a script that contains  
                  lines of text to send to the modem as well as fragments of  
                  what to expect from the modem itself. The chat scripts also  
                  allow for default actions to typical modem responses, such as  
                  the ability to abort a call attempt if the modem reports a  
                  busy signal. Here is a typical chat script for a simple dialup  
                  configuration: </P>
                  <BLOCKQUOTE>
                    <P class=docFootnote><SUP><A name="">[10]</A></SUP> The 
                    <SPAN class=docEmphBold>chat</SPAN> program is unrelated to 
                    the notion of Internet Relay Chat (IRC) and <SPAN 
                    class=docEmphasis>chat rooms</SPAN>.</P></BLOCKQUOTE><PRE>ABORT BUSY
ABORT ERROR
ABORT 'NO CARRIER'
ABORT 'NO DIALTONE'
ABORT 'Invalid Login'
ABORT 'Login incorrect'
'' ATZ
OK ATDT8005551212
CONNECT ''
ogin: jdoe
ssword: jdoepasswd
TIMEOUT 5
&gt; ppp</PRE>
                  <P class=docText>In this chat script, the first six lines use 
                  the <TT>ABORT</TT> keyword to provide strings that <SPAN 
                  class=docEmphBold>chat</SPAN> should consider to be fatal 
                  errors, terminating the call attempt. Any of the modem or PPP 
                  server responses -- <TT>BUSY</TT>, <TT>ERROR</TT>, <TT>NO 
                  CARRIER</TT>, <TT>NO DIALTONE</TT>, <TT>Invalid Login</TT>, 
                  and <TT>Login incorrect</TT> -- will cause the script to 
                  terminate. </P>
                  <P class=docText>Each subsequent line of this example is 
                  constructed using two items: an <SPAN 
                  class=docEmphasis>expected response</SPAN>, followed by a 
                  <SPAN class=docEmphasis>send string</SPAN>. Here, the first 
                  response is simply no response at all, indicated by the empty 
                  quotes, <TT>""</TT>. This causes <SPAN 
                  class=docEmphBold>chat</SPAN> to issue a send string 
                  consisting of the modem reset sequence <TT>ATZ</TT> without 
                  expecting any input. <SPAN class=docEmphBold>chat</SPAN> then 
                  waits for the next expected response, which should be an 
                  <TT>OK</TT>from the modem indicating a successful reset. After 
                  verifying that, the modem dials as a result of the 
                  <TT>ATDT</TT> command, and <SPAN class=docEmphBold>chat</SPAN> 
                  waits to receive a <TT>CONNECT</TT> response from the modem. 
                  If the modem returns <TT>BUSY</TT> instead of 
                  <TT>CONNECT</TT>, <SPAN class=docEmphBold>chat</SPAN> 
                  terminates as a result of the <TT>ABORT</TT> string at the top 
                  of the file. When <TT>CONNECT</TT> is received, <SPAN 
                  class=docEmphBold>chat</SPAN> simply sends a carriage return, 
                  indicated in the script by another set of empty quotes, to 
                  stimulate the PPP server to prompt for authentication (some 
                  PPP servers require this stimulation, others don't). Because 
                  this will be the first text from the server, it's possible 
                  that the first character could be garbled, so only the 
                  fragment <TT>ogin:</TT> is used to look for the 
                  <TT>login:</TT> prompt. In response, a username ( <I>jdoe</I>) 
                  is sent, and then the user is prompted for a password. After 
                  successful authentication, this particular PPP server (a 
                  dedicated Cisco dialup server managed by an ISP) requires PPP 
                  to be started using the <SPAN class=docEmphBold>ppp</SPAN> 
                  command at the <TT>&gt;</TT> prompt. </P>
                  <P class=docText>Note that strings with spaces or no 
                  characters are delimited with quotes and that a depiction of 
                  carriage returns isn't required. Neither must separate lines 
                  be used for each expect/send pair. This example could also 
                  look like this: </P><PRE>ABORT BUSY ABORT ERROR ABORT 'NO CARRIER' 
ABORT 'NO DIALTONE' ABORT 'Invalid Login'
ABORT 'Login incorrect'
'' ATZ OK ATDT8005551212 CONNECT ''
ogin: jdoe ssword: jdoepasswd
TIMEOUT 5
&gt; ppp</PRE>
                  <P class=docText>It's important that <SPAN 
                  class=docEmphBold>chat</SPAN> is given send/expect commands in 
                  pairs. Creating the file with separate lines for each pair 
                  makes for easy comprehension, but it isn't really necessary. 
                  Regardless of the chat script format, here's what the 
                  conversation looks like from <SPAN 
                  class=docEmphBold>chat</SPAN>'s point of view: </P><PRE><B>ATZ</B>
OK
<B>ATDT8005551212</B>
CONNECT 31200/ARQ/V34/LAPM/V42BIS

User Access Verification

login:<B>jdoe</B>
Password:&lt;jdoepasswd&gt;

mxusw5&gt;<B>ppp</B>
Entering PPP mode.
Async interface address is unnumbered (Loopback0)
Your IP address is 192.168.50.211. MTU is 1500 bytes

~&yuml;}#.!}!C} }4}&quot;}&amp;} }*} } }%}&amp;bGab}'}&quot;}(}&quot;V}?~~&yuml;}#.!}!
4}&quot;}&amp;} }*} } }%}&amp;bGab}'}&quot;}(}&quot;.&yuml;~~</PRE>
                  <P class=docText>The garbled text at the end is a terminal's 
                  attempt to render the binary PPP data as characters and is 
                  expected. </P>
                  <P>
                  <TABLE cellSpacing=0 width="90%" border=1>
                    <TBODY>
                    <TR>
                      <TD>
                        <H2 class=docSidebarTitle>On the Exam</H2>
                        <P class=docText>You should be able to create a basic 
                        chat script from scratch, providing basic login and PPP 
                        server information. </P></TD></TR></TBODY></TABLE><A 
                  name=lpicertnut-CHP-19-SECT-3.1.4></A>
                  <H5 class=docSection3Title>19.3.1.4 The PPP daemon</H5>
                  <P class=docText>In addition to the kernel support mentioned  
                  at the beginning of this Objective, the <A  
                  name=lpicertnut-IDXTERM-1405></A><A 
                  name=lpicertnut-IDXTERM-1406></A>PPP daemon (<SPAN  
                  class=docEmphBold>pppd</SPAN> ) is required to run PPP on  
                  Linux. When used by a client computer to establish a dialup  
                  connection, <SPAN class=docEmphBold>pppd</SPAN> does not start  
                  at boot time and remain active as do many other daemons.  
                  Instead, it runs as directed by users or automatically when a  
                  network connection is required. <SPAN  
                  class=docEmphBold>pppd</SPAN> has a large number of available  
                  options, but only a general understanding is necessary for  
                  Exam 102. </P><A name=p2_ch09-116-fm2xml></A> 
                  <TABLE cellPadding=5 width=515 border=0>
                    <TBODY>
                    <TR>
                      <TD align=left><B><I>pppd</I></B></TD>
                      <TD align=right></TD></TR></TBODY></TABLE>
                  <HR align=left width=515 color=black noShade SIZE=3>

                  <TABLE cellPadding=5 width=515 border=0>
                    <TBODY>
                    <TR>
                      <TD align=left></TD>
                      <TD align=right></TD></TR></TBODY></TABLE><A 
                  name=p2_ch09-118-fm2xml></A>
                  <H4 class=docRefsectTitle>Syntax</H4><PRE>pppd [device] [speed] [options]</PRE><A 
                  name=p2_ch09-119-fm2xml></A>
                  <H4 class=docRefsectTitle>Description</H4>
                  <P class=docText>Start the PPP daemon on <I>device</I> with 
                  serial interface rate <I>speed</I>. The <I>speed</I> parameter 
                  is almost always set to the maximum speed of the serial 
                  interface (115200 bits per second) to allow the modem to keep 
                  data compression running at full capacity. </P><A 
                  name=p2_ch09-120-fm2xml></A>
                  <H4 class=docRefsectTitle>Frequently used options</H4>
                  <DL class=docList>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>asyncap</SPAN> <I>map</I></SPAN> 
                    <DD>
                    <P class=docList>This option can be used to eliminate bits 
                    of the serial byte from use by <SPAN 
                    class=docEmphBold>pppd</SPAN>, preserving control 
                    characters. Each bit in <I>map</I> is excluded. It is common 
                    to set <I>map</I> to <TT>00000000</TT> to allow all 8 bits 
                    to be used. </P>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>connect</SPAN> 
                    <I>script-command</I></SPAN> 
                    <DD>
                    <P class=docList>This option calls the script that handles 
                    the modem setup and authentication, usually <SPAN 
                    class=docEmphBold>chat</SPAN>. <I>script-command</I> is a 
                    complete command string that initiates the modem dialup 
                    sequence, including <SPAN class=docEmphBold>chat</SPAN>, its 
                    parameters and the chat script. Since it includes the <SPAN 
                    class=docEmphBold>chat</SPAN> command, options, and a 
                    script, the entire <I>script-command </I>should be quoted so 
                    that <SPAN class=docEmphBold>pppd</SPAN> does not attempt to 
                    interpret it as options. </P>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>crtscts</SPAN></SPAN> 
                    <DD>
                    <P class=docList>This option instructs <SPAN 
                    class=docEmphBold>pppd</SPAN> to set the serial port to use 
                    hardware flow control (CTS/RTS). </P>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>debug</SPAN></SPAN> 
                    <DD>
                    <P class=docList>This option turns on debugging. Information 
                    is logged to <I>syslog</I> and also to the calling terminal, 
                    unless <SPAN class=docEmphBold>pppd</SPAN> detached (see the 
                    <SPAN class=docEmphBold>nodetach</SPAN> option). </P>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>defaultroute</SPAN></SPAN> 
                    <DD>
                    <P class=docList>By setting this option, <SPAN 
                    class=docEmphBold>pppd</SPAN> creates a default route in the 
                    routing table for the new PPP device. This is a typical need 
                    for a dialup system without network access. Note, however, 
                    that a networked system that already has a default route to 
                    its network interface would then have two default routes, 
                    which doesn't make sense. In this case, the administrator 
                    must determine how best to configure the routing for PPP 
                    connections. </P>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>ipparam</SPAN> <I>name</I></SPAN> 
                    <DD>
                    <P class=docList>If this option is included, <I>name</I> is 
                    included as the sixth argument to <I>/etc/ppp/ip-up</I>, a 
                    script that handles a few logging and network details after 
                    the PPP link is established. </P>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>lock</SPAN></SPAN> 
                    <DD>
                    <P class=docList>This instructs <SPAN 
                    class=docEmphBold>pppd</SPAN> to establish a lock file to 
                    claim exclusive access to <I>device</I>. </P>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>nodetach</SPAN></SPAN> 
                    <DD>
                    <P class=docList>This option prevents <SPAN 
                    class=docEmphBold>pppd</SPAN> from putting itself in the 
                    background, instead remaining attached to the calling 
                    terminal. This is helpful for interactive use and debugging. 
                    </P>
                    <DT><SPAN class=docPubcolor><SPAN 
                    class=docEmphBold>persist</SPAN></SPAN> 
                    <DD>
                    <P class=docList>In situations in which you want PPP to be  
                    constantly available (such as with dedicated modem links or  
                    direct system-to-system cable links), use the <SPAN  
                    class=docEmphBold>persist</SPAN> option. <SPAN  
                    class=docEmphBold>pppd</SPAN> attempts to reestablish a  
                    terminated PPP connection. This can protect your PPP link  
                    from modem power failure, line degradation, or line  
                    interruption. Note that this capability is specifically  
                    mentioned in Objective 4, and is likely to appear on Exam  
                    102.<SUP class=docFootnote>[11]</SUP> </P>
                    <BLOCKQUOTE>
                      <P class=docFootnote><SUP><A name="">[11]</A></SUP> It is 
                      likely that your distribution's automated for PPP scripts 
                      are capable of reestablishing terminated PPP links, 
                      perhaps without the <SPAN class=docEmphBold>persist</SPAN> 
                      option. This can be achieved with the use of a 
                      <TT>while</TT> loop.</P></BLOCKQUOTE></DD></DL>
                  <P>
                  <TABLE cellSpacing=0 width="90%" border=1>
                    <TBODY>
                    <TR>
                      <TD>
                        <H2 class=docSidebarTitle>On the Exam</H2>
                        <P class=docText>You should have a firm understanding of 
                        <SPAN class=docEmphBold>pppd</SPAN> and the nature and 
                        form of its options. In particular, be familiar with the 
                        <SPAN class=docEmphBold>persist</SPAN> option. 
                    </P></TD></TR></TBODY></TABLE><A 
                  name=lpicertnut-CHP-19-SECT-3.1.5></A>
                  <H5 class=docSection3Title>19.3.1.5 Manual PPP connection</H5>
                  <P class=docText>Here's a simple one-command example of a 
                  manual PPP connection, using the chat script presented 
                  earlier. In the <SPAN class=docEmphBold>pppd</SPAN> command, 
                  each option appears on a separate line for clarity, though 
                  this is not required in practice: </P><PRE># <B>/usr/sbin/pppd /dev/ttyS0 115200 \</B>
     <B>nodetach \</B>
<B>     lock \</B>
<B>     debug \</B>
<B>     crtscts \</B>
<B>     asyncmap 00000000 </B>
<B>     connect &quot;/usr/sbin/chat -vf \</B>
<B>          /etc/sysconfig/network-scripts/chat-ppp0&quot;</B></PRE>
                  <P class=docText><SPAN class=docEmphBold>pppd</SPAN> first  
                  calls the chat script,<SUP class=docFootnote>[12]</SUP> the results  
                  of which can be found in <I>/var/log/messages</I>:<SUP  
                  class=docFootnote>[13]</SUP> </P>
                  <BLOCKQUOTE>
                    <P class=docFootnote><SUP><A name="">[12]</A></SUP> Your 
                    chat script location may vary; this example is from a Red 
                    Hat Linux system.</P></BLOCKQUOTE>
                  <BLOCKQUOTE>
                    <P class=docFootnote><SUP><A name="">[13]</A></SUP> <SPAN 
                    class=docEmphBold>chat</SPAN> logs output as a result of the 
                    <SPAN class=docEmphBold>-v</SPAN> option, as passed to <SPAN 
                    class=docEmphBold>pppd</SPAN> in the quoted <SPAN 
                    class=docEmphBold>chat</SPAN> command.</P></BLOCKQUOTE><PRE>kernel: PPP: version 2.3.3 (demand dialing)
kernel: PPP line discipline registered.
kernel: registered device ppp0
pppd[1291]: pppd 2.3.7 started by root, uid 0
chat[1295]: abort on (BUSY)
chat[1295]: abort on (ERROR)
chat[1295]: abort on (NO CARRIER)
chat[1295]: abort on (NO DIALTONE)
chat[1295]: abort on (Invalid Login)
chat[1295]: abort on (Login incorrect)
chat[1295]: send (ATZ^M)
chat[1295]: expect (OK)
chat[1295]: ATZ^M^M
chat[1295]: OK
chat[1295]:  -- got it
chat[1295]: send (ATDT8005551212^M)
chat[1295]: expect (CONNECT)
chat[1295]: ^M
chat[1295]: ATDT8005551212^M^M
chat[1295]: CONNECT
chat[1295]:  -- got it
chat[1295]: send (^M)
chat[1295]: expect (ogin:)
chat[1295]:  31200/ARQ/V34/LAPM/V42BIS^M
chat[1295]: ^M
chat[1295]: ^M
chat[1295]: User Access Verification^M
chat[1295]: ^M
chat[1295]: login:
chat[1295]:  -- got it
chat[1295]: send (jdow^M)
chat[1295]: expect (ssword:)
chat[1295]: jdoe^M
chat[1295]: Password:
chat[1295]:  -- got it
chat[1295]: send (&lt;jdoepasswd&gt;^M)
chat[1295]: timeout set to 5 seconds
chat[1295]: expect (&gt;)
chat[1295]: ^M
chat[1295]: ^M
chat[1295]: ^M
chat[1295]: mxusw5&gt;
chat[1295]:  -- got it
chat[1295]: send (ppp^M)
pppd[1291]: Serial connection established.
pppd[1291]: Using interface ppp0
pppd[1291]: Connect: ppp0 &lt;--&gt; /dev/modem
pppd[1291]: local  IP address 192.168.100.202
pppd[1291]: remote IP address 192.168.100.1</PRE>
                  <P class=docText>The calling terminal, remaining attached to 
                  <SPAN class=docEmphBold>pppd</SPAN> due to the <SPAN 
                  class=docEmphBold>nodetach</SPAN> option, shows debugging 
                  information: </P><PRE>Serial connection established.
Using interface ppp0
Connect: ppp0 &lt;--&gt; /dev/ttyS0
sent [LCP ConfReq id=0x1 &lt;asyncmap 0x0&gt; 
   &lt;magic 0x5f6ecfaa&gt; &lt;pcomp&gt; &lt;accomp&gt;]
rcvd [LCP ConfReq id=0x46 &lt;asyncmap 0xa0000&gt; 
   &lt;magic 0x77161be5&gt; &lt;pcomp&gt; &lt;accomp&gt;]
sent [LCP ConfAck id=0x46 &lt;asyncmap 0xa0000&gt; 
   &lt;magic 0x77161be5&gt; &lt;pcomp&gt; &lt;accomp&gt;]
rcvd [IPCP ConfReq id=0x3e &lt;addr 192.168.100.1&gt;]
sent [LCP ConfReq id=0x1 &lt;asyncmap 0x0&gt; 
   &lt;magic 0x5f6ecfaa&gt; &lt;pcomp&gt; &lt;accomp&gt;]
rcvd [LCP ConfReq id=0x47 &lt;asyncmap 0xa0000&gt; 
   &lt;magic 0x7716279c&gt; &lt;pcomp&gt; &lt;accomp&gt;]
sent [LCP ConfAck id=0x47 &lt;asyncmap 0xa0000&gt; 
   &lt;magic 0x7716279c&gt; &lt;pcomp&gt; &lt;accomp&gt;]
rcvd [LCP ConfAck id=0x1 &lt;asyncmap 0x0&gt; 
   &lt;magic 0x5f6ecfaa&gt; &lt;pcomp&gt; &lt;accomp&gt;]
sent [IPCP ConfReq id=0x1 &lt;addr 192.168.1.30&gt;
rcvd [IPCP ConfReq id=0x3f &lt;addr 192.168.100.1&gt;]
sent [IPCP ConfAck id=0x3f &lt;addr 192.168.100.1&gt;]
rcvd [IPCP ConfRej id=0x1 &lt;compress VJ 0f 01&gt;]
sent [IPCP ConfReq id=0x2 &lt;addr 192.168.1.30&gt;]
rcvd [IPCP ConfNak id=0x2 &lt;addr 192.168.100.96&gt;]
sent [IPCP ConfReq id=0x3 &lt;addr 192.168.100.96&gt;]
rcvd [IPCP ConfAck id=0x3 &lt;addr 192.168.100.96&gt;]
local  IP address 192.168.1.220
remote IP address 192.168.1.1
Script /etc/ppp/ip-up started; pid = 3759
Script /etc/ppp/ip-up finished (pid 3759), status = 0x0</PRE>
                  <P class=docText>At this point, the PPP connection is up and 
                  these two new routes should appear in the routing table: </P>
                  <UL>
                    <LI>
                    <P class=docList>A route to the new <TT>ppp0</TT> 
                    interface.</P>
                    <LI>
                    <P class=docList>A default route through the new 
                    <TT>ppp0</TT> interface.</P></LI></UL>
                  <P class=docText>For example (here, the <TT>Met</TT> and 
                  <TT>Ref</TT> columns, mentioned earlier, are deleted for 
                  clarity): </P><PRE># <B>route</B>
Kernel IP routing table
Destination   Gateway       Genmask         Flags Use Iface
192.168.100.1 *             255.255.255.255 UH      0 ppp0
192.168.1.30  *             255.255.255.255 UH      0 eth0
192.168.1.0   *             255.255.255.0   U       0 eth0
127.0.0.0     *             255.0.0.0       U       0 lo
default       192.168.100.1 0.0.0.0         UG      0 ppp0</PRE>
                  <P class=docText>When your dialup session is complete, you can 
                  terminate <SPAN class=docEmphBold>pppd</SPAN> easily by 
                  entering <SPAN class=docEmphBold>Ctrl-C</SPAN> on the calling 
                  terminal: </P><PRE><B>^C</B>
pppd[1291]: Terminating on signal 2.
pppd[1291]: Connection terminated.
pppd[1291]: Connect time 5.9 minutes.
pppd[1291]: Sent 22350 bytes, received 34553266 bytes.
pppd[1291]: Exit.</PRE>
                  <P class=docText>When <SPAN class=docEmphBold>pppd</SPAN> is 
                  running in the background, terminate a PPP link by sending a 
                  <TT>SIGTERM</TT> signal to the running <SPAN 
                  class=docEmphBold>pppd</SPAN>. </P><A 
                  name=lpicertnut-CHP-19-SECT-3.1.6></A>
                  <H5 class=docSection3Title>19.3.1.6 Authentication 
                  protocols</H5>
                  <P class=docText>I<A name=IXT-19-350973></A>n the examples  
                  presented in this Objective, authentication with the PPP  
                  server is handled by means of a clear text username/password  
                  dialog and implemented using <SPAN  
                  class=docEmphBold>chat</SPAN>. This is a common setup, but  
                  three additional authentication techniques also exist. All of  
                  them embed the authentication information into the PPP data  
                  stream instead of using a clear text dialog prior to  
                  initiating PPP. These methods maintain authentication  
                  information, or <I>secrets</I>, in a file. </P><A  
                  name=IXT-19-350974></A>
                  <DL class=docList>
                    <DT><I><SPAN class=docPubcolor>PAP</SPAN></I> 
                    <DD>
                    <P class=docList>The <A name=IXT-19-350974></A>Password  
                    Authentication Protocol (PAP) is initiated by the connecting  
                    client, which sends a username/password pair. Secret  
                    information is stored in <I>/etc/ppp/pap-secrets</I>.  
                    </P></DD></DL><A name=IXT-19-350975></A>
                  <DL class=docList>
                    <DT><I><SPAN class=docPubcolor>CHAP</SPAN></I> 
                    <DD>
                    <P class=docList>The <A name=IXT-19-350975></A>Challenge  
                    Handshake Authentication Protocol (CHAP) is initiated by the  
                    server, which sends a <SPAN  
                    class=docEmphasis>challenge</SPAN>. The challenge data  
                    contains the server's name, and the client must respond with  
                    its name plus a new value derived from the challenge  
                    information and the stored authentication information. For  
                    CHAP, this information is stored in  
                    <I>/etc/ppp/chap-secrets</I>). CHAP may also include  
                    additional challenges over the life of the PPP connection.  
                    </P></DD></DL><A name=IXT-19-350976></A>
                  <DL class=docList>
                    <DT><I><SPAN class=docPubcolor>MSCHAP</SPAN></I> 
                    <DD>
                    <P class=docList><A name=IXT-19-350976></A>This is a  
                    Microsoft-specific variant of CHAP implemented on Windows NT  
                    systems using RAS. It is supported by <SPAN  
                    class=docEmphBold>pppd</SPAN>, although special provisions  
                    are required. See the <SPAN class=docEmphasis>Linux PPP  
                    HOWTO</SPAN> for more information if you're dialing into a  
                    Windows NT RAS server using MSCHAP. </P></DD></DL> 
                  <P class=docText>The authentication information stored in the 
                  <I>secrets</I> files for PAP and CHAP has a common format but 
                  is beyond the scope of the Exam 102. </P>
                  <P>
                  <TABLE cellSpacing=0 width="90%" border=1>
                    <TBODY>
                    <TR>
                      <TD>
                        <H2 class=docSidebarTitle>On the Exam</H2>
                        <P class=docText>Be aware that PAP, CHAP, and MSCHAP 
                        exist and may be required for some dialup situations. 
                        </P></TD></TR></TBODY></TABLE><A 
                  name=lpicertnut-CHP-19-SECT-3.1.7></A>
                  <H5 class=docSection3Title>19.3.1.7 PPP over ISDN</H5>
                  <P class=docText>Objective 4 makes casual mention of 
                  initiating ISDN connections using PPP over ISDN technology, 
                  but ISDN devices are beyond the scope of both LPIC Level 1 
                  exams. That said, getting PPP running on an existing ISDN 
                  setup using supported hardware is very similar to a modem 
                  connection. Most ISDN terminal adapters supported by Linux 
                  behave much like modems, so the same connection methods may be 
                  employed. A chat script sets up the terminal adapter and 
                  instructs it to dial (probably with a special dial string that 
                  implies both ISDN BRI phone numbers), and <SPAN 
                  class=docEmphBold>pppd</SPAN> continues as usual. However, 
                  ISDN connections will likely require the use of one of the 
                  authentication protocols already mentioned. If PAP is used, 
                  the corresponding <I>pap-secrets</I> file is necessary. While 
                  creating this file is trivial (it just contains your username 
                  and password on two separate lines), this file and PAP are 
                  beyond the scope of the LPIC Level 1 exams. </P><A 
                  name=lpicertnut-CHP-19-SECT-3.1.8></A>
                  <H5 class=docSection3Title>19.3.1.8 Too many variables</H5>
                  <P class=docText>Unfortunately, many of the elements involved 
                  in a dialup PPP connection lack specific standards: </P>
                  <UL>
                    <LI>
                    <P class=docList>Modems from various manufacturers may 
                    require unique settings to be made prior to dialing the PPP 
                    server. This means that setup strings included in chat 
                    scripts may be hardware-specific. The <SPAN 
                    class=docEmphasis>Linux Modem-HOWTO</SPAN> contains 
                    information on modem requirements. </P>
                    <LI>
                    <P class=docList>Authentication and PPP startup schemes vary 
                    among ISPs and other PPP servers. Therefore, the 
                    configuration of a dialup interface depends on the server's 
                    requirements. Specific information from the PPP server 
                    provider is necessary. </P>
                    <LI>
                    <P class=docList>PPP automation techniques vary among Linux 
                    distributions. While <SPAN class=docEmphBold>pppd</SPAN> 
                    comes with a default configuration style, there's no 
                    guarantee that your distribution will fully utilize it. This 
                    is particularly true for systems that include custom 
                    configuration tools that may use special configuration files 
                    and scripts. </P></LI></UL>
                  <P>
                  <TABLE cellSpacing=0 width="90%" border=1>
                    <TBODY>
                    <TR>
                      <TD>
                        <H2 class=docSidebarTitle>On the Exam</H2>
                        <P class=docText>PPP setup can be confusing,  
                        particularly when your Linux distribution adds  
                        additional complexity in order to make dialup carefree.  
                        Be sure that you've been able to establish a PPP session  
                        with a server through both automated configuration and  
                        manual methods. You'll also need to understand how and  
                        why <SPAN class=docEmphBold>chat</SPAN> is used, how  
                        expect/send strings are constructed, how to get  
                        debugging information from <SPAN  
                        class=docEmphBold>pppd</SPAN>, and the routing  
                        implications of PPP (the default route). You don't need  
                        to memorize all of <SPAN class=docEmphBold>pppd</SPAN>'s  
                        many options or understand each script associated with  
                        automated startup of <SPAN  
                        class=docEmphBold>pppd</SPAN>, as these are beyond the  
                        scope of Exam 102. Nonchat authentication schemes and  
                        the setup of PPP servers are also beyond the scope of  
                        this exam.<A name=IXTR3-112></A><A name=IXTR3-113></A>  
                        <A name=IXTR3-114></A><A name=IXTR3-115></A><A  
                        name=IXTR3-116></A><A 
                    name=IXT-19-350977></A></P></TD></TR></TBODY></TABLE>
                  <UL></UL></TD></TR></TBODY></TABLE>
            
            
          </TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD vAlign=bottom align=middle colSpan=3>&nbsp;</TD></TR>
  <TR>
    <TD colSpan=4></TD></TR></TBODY></TABLE><!--
(guidin)584DDD8E-DC91-4753-A8-94-0A-5B-CA-9F-5C-96
(guidout)584DDD8E-DC91-4753-A8-94-0A-5B-CA-9F-5C-96
(ip)211.76.97.228
(host)safari.informit.com
(portal)informit
(ref)http://safari.informit.com/JVXSL.asp?x=1&mode=section&sortKey=title&sortOrder=asc&view=&xmlid=1-56592-748-6/lpicertnut-CHP-19-SECT-3&open=false&catid=&s=1&b=1&f=1&t=1&c=1&u=1
(base)?x=1&mode=print&sortKey=title&sortOrder=asc&view=&xmlid=1-56592-748-6/lpicertnut-CHP-19-SECT-3&open=false&catid=&s=1&b=1&f=1&t=1&c=1&u=1
(mode)print
(xmlid)1-56592-748-6/lpicertnut-CHP-19-SECT-3
(key)77BDD37BD144271538599547F3F513CCC632FE7317BE1B3D26790352FECE7B23F00108F67F49C1D8
(user)84132/106143

(xsl)0ms
(lib)469ms
(xml)453ms
(xsl)32ms
(ent)0ms
(buf)0ms

(tot)1265ms
--></BODY></HTML>
